<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>fuse-parent</artifactId>
        <groupId>com.redhat.fuse.demo</groupId>
        <version>1.2-SNAPSHOT</version>
    </parent>

    <groupId>com.redhat.fuse.demo</groupId>
    <artifactId>fuse-kafka-to-sql</artifactId>

    <name>JKube :: Demo :: Spring-Boot :: Camel :: Kafka</name>
    <description>Spring Boot example running a Camel route kafka to sql</description>

    <dependencies>

        <!-- Enabling health checks -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-undertow</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-kafka-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-sql-starter</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>

        <!-- metrics -->
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-metrics-starter</artifactId>
        </dependency>
        <dependency>     
            <groupId>org.apache.camel</groupId>     
            <artifactId>camel-micrometer-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>

        <!-- testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-test-spring</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.kafka</groupId>
                    <artifactId>kafka_2.12</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.scala-lang</groupId>
                    <artifactId>scala-library</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>mssql-jdbc</artifactId>
            <version>12.4.2.jre8</version>
        </dependency>

        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>kafka</artifactId>
            <version>1.19.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>mssqlserver</artifactId>
            <version>1.19.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mock-server</groupId>
            <artifactId>mockserver-junit-rule</artifactId>
            <version>5.11.1</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <defaultGoal>spring-boot:run</defaultGoal>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.jboss.redhat-fuse</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${fuse.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>

    </build>

    <profiles>

        <profile>
            <id>openshift</id>
            <properties>
                <jkube.namespace>fuse-demos</jkube.namespace>
                <image.pull.secret>default-dockercfg-r486j</image.pull.secret>
                <jkube.createExternalUrls>true</jkube.createExternalUrls>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.eclipse.jkube</groupId>
                        <artifactId>openshift-maven-plugin</artifactId>
                        <version>1.5.1</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>resource</goal>
                                    <goal>build</goal>
                                    <goal>helm</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <images>
                                <image>
                                    <name>${project.artifactId}:${project.version}</name>
                                    <build>
                                        <from>registry.redhat.io/fuse7/fuse-java-openshift:1.8</from>
                                        <assembly>
                                            <targetDir>/deployments</targetDir>
                                        </assembly>
                                        <ports>
                                            <port>8080</port>
                                        </ports>
                                    </build>
                                </image>
                            </images>
                            <resources>
                                <replicas>1</replicas>
                                <controllerName>${project.artifactId}</controllerName>
                                <services>
                                    <service>
                                        <name>${project.artifactId}</name>
                                        <type>LoadBalancer</type>
                                        <ports>
                                            <port>
                                                <name>http</name>
                                                <port>8080</port>
                                                <targetPort>8080</targetPort>
                                            </port>
                                        </ports>
                                    </service>
                                </services>
                            </resources>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>kubernetes</id>
            <properties>
                <jkube.docker.registry>quay.io</jkube.docker.registry>
                <jkube.namespace>fuse-demos</jkube.namespace>
                <image.pull.secret>pullsecret-jkube</image.pull.secret>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.eclipse.jkube</groupId>
                        <artifactId>kubernetes-maven-plugin</artifactId>
                        <version>1.5.1</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>resource</goal>
                                    <goal>build</goal>
                                    <goal>helm</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <registry>quay.io</registry>
                            <images>
                                <image>
                                    <name>mronconi/${project.artifactId}:${project.version}</name>
                                    <build>
                                        <from>registry.redhat.io/fuse7/fuse-java-openshift:1.8</from>
                                        <assembly>
                                            <targetDir>/deployments</targetDir>
                                        </assembly>
                                        <ports>
                                            <port>8080</port>
                                        </ports>
                                    </build>
                                </image>
                            </images>
                            <resources>
                                <replicas>1</replicas>
                                <controllerName>${project.artifactId}</controllerName>
                                <services>
                                    <service>
                                        <name>${project.artifactId}</name>
                                        <type>LoadBalancer</type>
                                        <ports>
                                            <port>
                                                <name>http</name>
                                                <port>8080</port>
                                                <targetPort>8080</targetPort>
                                            </port>
                                        </ports>
                                    </service>
                                </services>
                            </resources>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>
</project>
